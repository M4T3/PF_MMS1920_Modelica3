package Modelica_Gruppe_3_Flaschenzug

  connector Port_Mechanic_rot
    Real alpha(unit = "rad") "Drehwinkel in [rad]";
    flow Real M(unit = "N.m") "Drehmoment in [Nm]";
    annotation(
      Icon(graphics = {Rectangle(origin = {-1, 0}, fillColor = {0, 170, 0}, fillPattern = FillPattern.Solid, lineThickness = 0.75, extent = {{-59, 60}, {61, -60}}), Text(origin = {1, 1}, extent = {{-55, 19}, {55, -19}}, textString = "Port_Mechanic_rot")}));
  end Port_Mechanic_rot;

  connector Port_F_s
    Real s(unit = "m") "Weg in [m]";
    flow Real F(unit = "N") "Kraft in [N]";
    annotation(
      Icon(graphics = {Rectangle(fillColor = {0, 0, 144}, fillPattern = FillPattern.Solid, extent = {{-40, 40}, {40, -40}}), Text(origin = {2, 1}, extent = {{-32, 15}, {32, -15}}, textString = "F<->s")}));
  end Port_F_s;
  model Decke
    Modelica_Gruppe_3_Flaschenzug.Port_F_s Aufhaengung annotation(
      Placement(visible = true, transformation(origin = {0, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {0, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  equation
    Aufhaengung.s = 0;
    annotation(
      Icon(graphics = {Rectangle(origin = {10, 5}, fillColor = {134, 134, 134}, fillPattern = FillPattern.Backward, extent = {{-94, 3}, {86, -3}})}, coordinateSystem(extent = {{-100, -20}, {100, 20}})),
      Diagram(coordinateSystem(extent = {{-100, -20}, {100, 20}})),
      __OpenModelica_commandLineOptions = "");
  end Decke;

  model Rolle
    Port_F_s Lager_Rolle_1 annotation(
      Placement(visible = true, transformation(origin = {-2, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-2, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Port_F_s port_Seil_input annotation(
      Placement(visible = true, transformation(origin = {-60, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-60, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Port_F_s port_Seil_output annotation(
      Placement(visible = true, transformation(origin = {62, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {62, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  equation
    port_Seil_input.s + port_Seil_output.s = 2 * Lager_Rolle_1.s;
    port_Seil_input.F + port_Seil_output.F = -Lager_Rolle_1.F;
    port_Seil_input.F = port_Seil_output.F;
    annotation(
      Icon(graphics = {Ellipse(fillColor = {202, 202, 202}, fillPattern = FillPattern.Solid, extent = {{-60, 60}, {60, -60}}, endAngle = 360), Ellipse(origin = {6, -6}, fillPattern = FillPattern.Solid, extent = {{-20, 20}, {6, -6}}, endAngle = 360)}, coordinateSystem(extent = {{-70, -70}, {70, 70}})),
      Diagram(coordinateSystem(extent = {{-70, -70}, {70, 70}})),
      __OpenModelica_commandLineOptions = "",
      experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-6, Interval = 0.002));
  end Rolle;

  model Masse
    Modelica_Gruppe_3_Flaschenzug.Port_F_s port_Masse annotation(
      Placement(visible = true, transformation(origin = {2, -18}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {0, -12}, extent = {{-20, -20}, {20, 20}}, rotation = 0)));
    constant Real g = -10 "Erdbeschleunigung in [m/sÂ²]";
    parameter Real m = 1;
    Real s(unit = "m", start = 0);
    Real v(unit = "m/s", start = 0);
    Real a(unit = "m/s/s", start = 0);
  equation
    a = der(v);
    v = der(s);
    s = port_Masse.s;
    port_Masse.F = (-m * a) + m * g;
    annotation(
      Icon(graphics = {Polygon(origin = {0, -50}, fillPattern = FillPattern.Solid, points = {{-60, -30}, {60, -30}, {20, 30}, {-20, 30}, {-60, -30}}), Text(origin = {5, -55}, lineColor = {255, 255, 255}, extent = {{-35, 13}, {35, -13}}, textString = "Masse")}, coordinateSystem(extent = {{-60, -80}, {60, 0}})),
      Diagram(coordinateSystem(extent = {{-60, -80}, {60, 0}})),
      __OpenModelica_commandLineOptions = "");
  end Masse;

  model Hand
    Modelica_Gruppe_3_Flaschenzug.Port_F_s Zug_Hand_F_s annotation(
      Placement(visible = true, transformation(origin = {8, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {6, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  equation
    Zug_Hand_F_s.F = -2;
    annotation(
      Icon(graphics = {Ellipse(origin = {10, -20}, fillColor = {255, 170, 127}, fillPattern = FillPattern.Solid, extent = {{-44, 22}, {38, -4}}, endAngle = 360), Ellipse(origin = {-30, 21}, fillColor = {255, 170, 127}, fillPattern = FillPattern.Solid, extent = {{10, -25}, {-4, 31}}, endAngle = 360), Ellipse(origin = {-4, 27}, fillColor = {255, 170, 127}, fillPattern = FillPattern.Solid, extent = {{10, -25}, {-4, 31}}, endAngle = 360), Ellipse(origin = {14, 27}, fillColor = {255, 170, 127}, fillPattern = FillPattern.Solid, extent = {{10, -25}, {-4, 31}}, endAngle = 360), Ellipse(origin = {32, 23}, fillColor = {255, 170, 127}, fillPattern = FillPattern.Solid, extent = {{10, -25}, {-4, 31}}, endAngle = 360)}, coordinateSystem(extent = {{-50, -40}, {50, 60}})),
      Diagram(coordinateSystem(extent = {{-50, -40}, {50, 60}})),
      __OpenModelica_commandLineOptions = "",
      experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-6, Interval = 0.002));
  end Hand;

  model Seil
    Modelica_Gruppe_3_Flaschenzug.Port_F_s Seil_oben annotation(
      Placement(visible = true, transformation(origin = {0, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {0, 80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica_Gruppe_3_Flaschenzug.Port_F_s Seil_unten annotation(
      Placement(visible = true, transformation(origin = {0, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {0, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  equation
    Seil_oben.s = Seil_unten.s;
    Seil_oben.F + Seil_unten.F = 0;
    annotation(
      Icon(graphics = {Rectangle(origin = {1, -1}, fillColor = {198, 159, 3}, fillPattern = FillPattern.Forward, extent = {{-5, 77}, {3, -75}})}, coordinateSystem(extent = {{-10, -100}, {10, 100}})),
      Diagram(coordinateSystem(extent = {{-10, -100}, {10, 100}})),
      __OpenModelica_commandLineOptions = "");
  end Seil;

  model Seilwinde
    Port_Mechanic_rot port_Mechanic_rot1 annotation(
      Placement(visible = true, transformation(origin = {0, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {2, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Port_F_s port_F_s1 annotation(
      Placement(visible = true, transformation(origin = {90, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    parameter Real r(unit = "m") = 0.5 "Seilwindendurchmesser in [m]";
  equation
    port_Mechanic_rot1.alpha * r = port_F_s1.s;
    port_F_s1.F * r + port_Mechanic_rot1.M = 0;
    annotation(
      Icon(graphics = {Ellipse(fillColor = {145, 145, 145}, fillPattern = FillPattern.Solid, extent = {{-60, 60}, {60, -60}}, endAngle = 360), Rectangle(origin = {43, 59}, fillColor = {221, 189, 6}, fillPattern = FillPattern.Backward, extent = {{-45, 1}, {45, -1}})}, coordinateSystem(extent = {{-70, -70}, {100, 70}})),
      Diagram(coordinateSystem(extent = {{-70, -70}, {100, 70}})),
      __OpenModelica_commandLineOptions = "");
  end Seilwinde;

  model GM_Nebenschluss
    Port_Mechanic_rot port_Mechanic annotation(
      Placement(visible = true, transformation(origin = {58, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {60, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    //Betriebsarten
    //parameter Real Betriebsart = String(Aus);
    parameter Real Betriebsart = 1;
    //---------------------------
    //Port Variablen
    Real alpha(unit = "rad", start = 0);
    //---------------------------
    //Parameter elektrisch
    parameter Real U_b(unit = "V") = 0;
    parameter Real R_a(unit = "Ohm") = 0.04;
    parameter Real R_aV(unit = "Ohm") = 1;
    parameter Real R_fw(unit = "Ohm") = 17;
    parameter Real R_fwV(unit = "Ohm") = 1;
    parameter Real L_a(unit = "H") = 400e-6;
    parameter Real L_fw(unit = "H") = 7.5;
    parameter Real Spannung_Anker(unit = "V") = 0;
    parameter Real Spannung_Feldwicklung(unit = "V") = 0;
    //---------------------------
    //Variablen elektrisch
    Real u_a(unit = "V");
    Real u_fw(unit = "V");
    Real i_a(unit = "A", start = 0);
    Real i_fw(unit = "A", start = 0);
    Real k_e(unit = "V.s");
    Real k_t(unit = "N.m/A");
    //---------------------------
    //Parameter mechanisch
    parameter Real J(unit = "kg.m2") = 10e-2;
    //---------------------------
    //Variablen mechanisch
    Real omega(unit = "rad/s", start = 0);
    Real n(unit = "1/s", start = 0);
    Real M_l(unit = "N.m");
    Real M_e(unit = "N.m");
  //---------------------------
    //Konstanten
    constant Real PI = Modelica.Constants.pi;
  equation
  
    if (Betriebsart == 0) then 
      u_a = 0;
      u_fw = 0;
      M_e = M_l;
    elseif (Betriebsart == 1) then
      u_a = 40;
      u_fw = 300;
      M_e = k_t * i_a;
    elseif (Betriebsart == 2) then
      u_a = 40;
      u_fw = -300;
      M_e = k_t * i_a;
    elseif (Betriebsart == 3) then
      u_a = Spannung_Anker;
      u_fw = Spannung_Feldwicklung;
      M_e = k_t * i_a;
    end if; 
  
    k_e = 1 / (1 + exp(-0.28 * i_fw)) - 0.5 + 0.004 * i_fw;
    k_t = k_e / (2 * PI);
    omega = der(alpha);
    n = 2 * PI * omega;
    alpha = port_Mechanic.alpha;
    M_l = port_Mechanic.M;
    u_a = 2 * U_b + (R_a + R_aV) * i_a + L_a * der(i_a) + k_e * n;
    u_fw = (R_fw + R_fwV) * i_fw + L_fw * der(i_fw);
    J * der(omega) = M_e - M_l;
    annotation(
      Icon(graphics = {Rectangle(fillColor = {144, 144, 144}, fillPattern = FillPattern.Solid, extent = {{-60, 40}, {60, -40}})}, coordinateSystem(extent = {{-80, -50}, {80, 50}})),
      Diagram(coordinateSystem(extent = {{-80, -50}, {80, 50}})),
      __OpenModelica_commandLineOptions = "");
  end GM_Nebenschluss;

  model Getriebe
  Modelica_Gruppe_3_Flaschenzug.Port_Mechanic_rot port_Getriebe_I annotation(
      Placement(visible = true, transformation(origin = {-90, -32}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-90, -30}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica_Gruppe_3_Flaschenzug.Port_Mechanic_rot port_Getriebe_O annotation(
      Placement(visible = true, transformation(origin = {88, 30}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {90, 30}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  
  
  parameter Real i = 6;
  parameter Real Wirkungsgrad = 1;
  
  
  equation
    port_Getriebe_O.M + Wirkungsgrad * i * port_Getriebe_I.M = 0;
    port_Getriebe_I.alpha = i * (-port_Getriebe_O.alpha);
  
  
    annotation(
      Icon(graphics = {Rectangle(fillColor = {90, 90, 90}, fillPattern = FillPattern.Solid, extent = {{-60, 60}, {60, -60}}), Rectangle(origin = {-80, -30}, fillColor = {163, 163, 163}, fillPattern = FillPattern.Solid, extent = {{-20, 10}, {20, -10}}), Rectangle(origin = {80, 30}, fillColor = {163, 163, 163}, fillPattern = FillPattern.Solid, extent = {{-20, 10}, {20, -10}}), Bitmap(origin = {0, -1}, extent = {{-56, 55}, {56, -55}}, imageSource = "")}, coordinateSystem(initialScale = 0.1)),
      Diagram);end Getriebe;

  model Last_rotatorisch
    Modelica_Gruppe_3_Flaschenzug.Port_Mechanic_rot port_Mechanic_Last annotation(
      Placement(visible = true, transformation(origin = {6, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {2, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  equation
    if time < 5 then
      port_Mechanic_Last.M = 0;
    else
      port_Mechanic_Last.M = -12;
    end if;
    annotation(
      Icon(graphics = {Ellipse(fillColor = {185, 5, 5}, fillPattern = FillPattern.Solid, lineThickness = 0.75, extent = {{-60, 60}, {60, -60}}, endAngle = 360)}, coordinateSystem(extent = {{-70, -70}, {70, 70}})),
      Diagram(coordinateSystem(extent = {{-70, -70}, {70, 70}})),
      __OpenModelica_commandLineOptions = "");
  end Last_rotatorisch;

  model Test_Motor
    Modelica_Gruppe_3_Flaschenzug.Last_rotatorisch last_rotatorisch1 annotation(
      Placement(visible = true, transformation(origin = {67, -3}, extent = {{-33, -33}, {33, 33}}, rotation = 0)));
  Modelica_Gruppe_3_Flaschenzug.GM_Nebenschluss gM_Nebenschluss1(Betriebsart = 2, Spannung_Anker = 40, Spannung_Feldwicklung = -300)  annotation(
      Placement(visible = true, transformation(origin = {-63.2, -10}, extent = {{-52.8, -33}, {52.8, 33}}, rotation = 0)));
  Modelica_Gruppe_3_Flaschenzug.Getriebe getriebe1 annotation(
      Placement(visible = true, transformation(origin = {10, -10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  equation
  connect(getriebe1.port_Getriebe_O, last_rotatorisch1.port_Mechanic_Last) annotation(
      Line(points = {{19, -7}, {68, -7}, {68, -2}}));
  connect(gM_Nebenschluss1.port_Mechanic, getriebe1.port_Getriebe_I) annotation(
      Line(points = {{-24, -10}, {1, -10}, {1, -13}}));
  end Test_Motor;

  model Potenzflaschenzug
    Modelica_Gruppe_3_Flaschenzug.Decke decke1 annotation(
      Placement(visible = true, transformation(origin = {5, 80.2}, extent = {{-79, -15.8}, {79, 15.8}}, rotation = 0)));
    Modelica_Gruppe_3_Flaschenzug.Rolle rolle1 annotation(
      Placement(visible = true, transformation(origin = {-28, 46}, extent = {{-7, -7}, {7, 7}}, rotation = 0)));
    Modelica_Gruppe_3_Flaschenzug.Rolle rolle2 annotation(
      Placement(visible = true, transformation(origin = {-8, 34}, extent = {{-7, -7}, {7, 7}}, rotation = 0)));
    Modelica_Gruppe_3_Flaschenzug.Rolle rolle3 annotation(
      Placement(visible = true, transformation(origin = {8, 6}, extent = {{-7, -7}, {7, 7}}, rotation = 0)));
    Hand hand1 annotation(
      Placement(visible = true, transformation(origin = {-48, 22}, extent = {{-5, -4}, {5, 6}}, rotation = 0)));
    Masse masse1 annotation(
      Placement(visible = true, transformation(origin = {4, -26}, extent = {{-6, -8}, {6, 0}}, rotation = 0)));
    Seil seil1 annotation(
      Placement(visible = true, transformation(origin = {-40, 42}, extent = {{-1, -10}, {1, 10}}, rotation = 0)));
    Modelica_Gruppe_3_Flaschenzug.Seil seil2 annotation(
      Placement(visible = true, transformation(origin = {-16, 46}, extent = {{-1, -10}, {1, 10}}, rotation = 0)));
    Modelica_Gruppe_3_Flaschenzug.Seil seil3 annotation(
      Placement(visible = true, transformation(origin = {0, 50}, extent = {{-1, -10}, {1, 10}}, rotation = 0)));
    Seil seil4 annotation(
      Placement(visible = true, transformation(origin = {-4, 14}, extent = {{-1, -10}, {1, 10}}, rotation = 0)));
    Seil seil5 annotation(
      Placement(visible = true, transformation(origin = {16, 22}, extent = {{-1, -10}, {1, 10}}, rotation = 0)));
  equation
    connect(seil3.Seil_oben, decke1.Aufhaengung) annotation(
      Line(points = {{0, 58}, {4, 58}, {4, 78}, {6, 78}}));
    connect(rolle2.port_Seil_output, seil3.Seil_unten) annotation(
      Line(points = {{-2, 34}, {-2, 37}, {0, 37}, {0, 42}}));
    connect(seil2.Seil_oben, rolle1.port_Seil_output) annotation(
      Line(points = {{-16, 54}, {-18, 54}, {-18, 46}, {-22, 46}}));
    connect(rolle2.port_Seil_input, seil2.Seil_unten) annotation(
      Line(points = {{-14, 34}, {-14, 37}, {-16, 37}, {-16, 38}}));
    connect(rolle1.Lager_Rolle_1, decke1.Aufhaengung) annotation(
      Line(points = {{-28, 46}, {-28, 59}, {6, 59}, {6, 78}}));
    connect(rolle1.port_Seil_input, seil1.Seil_oben) annotation(
      Line(points = {{-34, 46}, {-34, 63}, {-40, 63}, {-40, 50}}));
    connect(seil5.Seil_oben, decke1.Aufhaengung) annotation(
      Line(points = {{16, 30}, {6, 30}, {6, 78}, {6, 78}}));
    connect(seil1.Seil_unten, hand1.Zug_Hand_F_s) annotation(
      Line(points = {{-40, 34}, {-48, 34}, {-48, 20}, {-48, 20}}));
    connect(seil4.Seil_oben, rolle2.Lager_Rolle_1) annotation(
      Line(points = {{-4, 22}, {-8, 22}, {-8, 34}, {-8, 34}}));
    connect(rolle3.port_Seil_output, seil5.Seil_unten) annotation(
      Line(points = {{14, 6}, {16, 6}, {16, 14}, {16, 14}}));
    connect(rolle3.port_Seil_input, seil4.Seil_unten) annotation(
      Line(points = {{2, 6}, {-4, 6}, {-4, 6}, {-4, 6}}));
    connect(masse1.port_Masse, rolle3.Lager_Rolle_1) annotation(
      Line(points = {{4, -28}, {8, -28}, {8, 6}, {8, 6}}));
    annotation(
      experiment(StartTime = 0, StopTime = 5, Tolerance = 1e-6, Interval = 0.002));
  end Potenzflaschenzug;

  model Falschenzug_normal
  Modelica_Gruppe_3_Flaschenzug.GM_Nebenschluss gM_Nebenschluss1(Betriebsart = 1)  annotation(
      Placement(visible = true, transformation(origin = {-70, -79.75}, extent = {{-30, -18.75}, {30, 18.75}}, rotation = 0)));
  Modelica_Gruppe_3_Flaschenzug.Getriebe getriebe1 annotation(
      Placement(visible = true, transformation(origin = {-7, -71}, extent = {{-33, -33}, {33, 33}}, rotation = 0)));
  Modelica_Gruppe_3_Flaschenzug.Seilwinde seilwinde1 annotation(
      Placement(visible = true, transformation(origin = {52.0622, -71.7564}, extent = {{-16.7564, -16.7564}, {23.9378, 16.7564}}, rotation = 0)));
  Modelica_Gruppe_3_Flaschenzug.Decke decke1 annotation(
      Placement(visible = true, transformation(origin = {-2, 86}, extent = {{-50, -10}, {50, 10}}, rotation = 0)));
  Seil seil1 annotation(
      Placement(visible = true, transformation(origin = {-4, 62}, extent = {{-1, -10}, {1, 10}}, rotation = 0)));
  Rolle rolle1 annotation(
      Placement(visible = true, transformation(origin = {2, 40}, extent = {{-7, -7}, {7, 7}}, rotation = 0)));
  Seil seil2 annotation(
      Placement(visible = true, transformation(origin = {10, 62}, extent = {{-1, -10}, {1, 10}}, rotation = 0)));
  Modelica_Gruppe_3_Flaschenzug.Rolle rolle2 annotation(
      Placement(visible = true, transformation(origin = {22, 76}, extent = {{-7, -7}, {7, 7}}, rotation = 0)));
  Modelica_Gruppe_3_Flaschenzug.Seil seil3 annotation(
      Placement(visible = true, transformation(origin = {28, 42}, extent = {{-1, -10}, {1, 10}}, rotation = 0)));
  Modelica_Gruppe_3_Flaschenzug.Masse masse1(m = 10)  annotation(
      Placement(visible = true, transformation(origin = {2.41016, 28}, extent = {{-12.4102, -16.5469}, {12.4102, 0}}, rotation = 0)));
  equation
    connect(rolle1.Lager_Rolle_1, masse1.port_Masse) annotation(
      Line(points = {{2, 40}, {2, 40}, {2, 22}, {2, 22}}));
    connect(rolle2.Lager_Rolle_1, decke1.Aufhaengung) annotation(
      Line(points = {{22, 76}, {-2, 76}, {-2, 86}, {-2, 86}}));
    connect(seil1.Seil_oben, decke1.Aufhaengung) annotation(
      Line(points = {{-4, 70}, {-2, 70}, {-2, 86}, {-2, 86}}));
    connect(rolle1.port_Seil_input, seil1.Seil_unten) annotation(
      Line(points = {{-4, 40}, {-4, 40}, {-4, 54}, {-4, 54}}));
    connect(seil2.Seil_unten, rolle1.port_Seil_output) annotation(
      Line(points = {{10, 54}, {8, 54}, {8, 40}, {8, 40}}));
    connect(rolle2.port_Seil_input, seil2.Seil_oben) annotation(
      Line(points = {{16, 76}, {10, 76}, {10, 70}, {10, 70}}));
    connect(rolle2.port_Seil_output, seil3.Seil_oben) annotation(
      Line(points = {{28, 76}, {28, 76}, {28, 50}, {28, 50}}));
    connect(seilwinde1.port_F_s1, seil3.Seil_unten) annotation(
      Line(points = {{76, -58}, {76, -8}, {28, -8}, {28, 34}}));
    connect(getriebe1.port_Getriebe_O, seilwinde1.port_Mechanic_rot1) annotation(
      Line(points = {{22, -62}, {55, -62}, {55, -72}}));
    connect(gM_Nebenschluss1.port_Mechanic, getriebe1.port_Getriebe_I) annotation(
      Line(points = {{-48, -80}, {-38, -80}, {-38, -80}, {-36, -80}}));
  end Falschenzug_normal;
  annotation(
    uses(Modelica(version = "3.2.2")));
end Modelica_Gruppe_3_Flaschenzug;
